/*makecert -sv SignRoot2.pvk -cy authority -r signroot.cer -a sha1 -n "CN=Dev Certification Authority" -ss my -sr localmachine
makecert -iv SignRoot2.pvk -ic signroot.cer -cy end -pe -n  CN="localhost" -eku 1.3.6.1.5.5.7.3.1 -ss my -sr  localmachine -sky exchange -sp "Microsoft RSA SChannel Cryptographic Provider" -sy 12

netsh 
http add sslcert ipport=127.0.0.1:8205 certhash=cc65adb7ec8d41ef113e4ae7e7c6e37a021322d6 appid={00112233-4455-6677-8899-AABBCCDDEEFF}
netsh 
http add sslcert ipport=0.0.0.0:9305 certhash=cbab36aa284b39912dc9521d17873e4d80312f99 appid={4db27f8e-ec45-43d3-824e-5147e57504cf}
winhttpcertcfg.exe -g -i "Certificate.pfx" -c LOCAL_MACHINE\My -a "Network Service" -p 123456
|| open up the cerficate, and export it as .pfx file*/


ThreadPool.QueueUserWorkItem(delegate
            {              
                TcpListener listener = new TcpListener(IPAddress.Any, 8585);
                listener.Start();

                // Wait for a client to connect on TCP port 1300
                TcpClient clientSocket = listener.AcceptTcpClient();
                var certificate = new X509Certificate2(@"C:\Users\tony\Documents\Visual Studio 2015\Projects\WpfApplication1\WpfApplication1\s.pfx", "123456");

                // Create a stream to decrypt the data
                using (SslStream sslStream = new SslStream(clientSocket.GetStream()))
                {
                    sslStream.AuthenticateAsServer(certificate);
                    var buffer = new byte[50000];
                    var count = 0;
                    while (true)
                    {
                        count = sslStream.Read(buffer, 0, buffer.Length);
                        if (count > 0)
                        {
                            var s = Encoding.UTF8.GetString(buffer, 0, count);
                        }
                    }
                }

                store.Close();
            });
			
			
		private void button_Click(object sender, RoutedEventArgs e)
        {
            string server = "127.0.0.1";
            var client = new TcpClient(server, 8585);
            // Create a secure stream
            using (var sslStream = new SslStream(client.GetStream(), false, new RemoteCertificateValidationCallback(ValidateServerCertificate), null))
            {
                sslStream.AuthenticateAsClient(server);
                sslStream.Write(Encoding.UTF8.GetBytes("sec"));
                // ... Send and read data over the stream
            }
            // Disconnect and close the client
            client.Close();
        }

        public static bool ValidateServerCertificate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
        {
            // Accept all certificates
            return true;
        }